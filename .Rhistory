}
sigma.beta.h~dunif(0,5)
tau.beta.h<-pow(sigma.beta.h,-2)
sigma2.beta.h <- pow(sigma.beta.h, 2)
for (p in 1:npen){
for (t in 1:(n.occasions-1)){
beta.j[p,t] ~ dnorm(0,tau.beta.j)    #Prior for logit of mean recapture with random effect of pen given block
}
}
sigma.beta.j~dunif(0,5)
tau.beta.j<-pow(sigma.beta.j,-2)
sigma2.beta.j <- pow(sigma.beta.j, 2)
beta.t ~ dnorm(0, 0.001)I(-10, 10)         # Prior for temp slope parameter on survival
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
ao.data <- list(y = ao_CH, int=interval_ao$int, f = f_ao, nind = dim(ao_CH)[1], n.occasions = dim(ao_CH)[2], z = known.state.cjs(ao_CH),
nblock = length(unique(block_ao)), block = as.numeric(block_ao), npen = length(unique(pen_ao)), pen = as.numeric(pen_ao),
mass=stdmass_ao, g = length(unique(group_ao)), group=group_ao, m=m_ao,
temp = ao_stdtempc)
# Initial values (probably need to adjust thse to match dimensions of certain parameters)
ao.inits <- function(){list(z = cjs.init.z(ao_CH,f_ao),
beta.t = runif(1, -5, 5),
beta.e = c(NA, rnorm(3)),
beta.a = c(NA, rnorm(3)),
beta.c = runif(length(unique(block_ao)), 0, 1),
beta.h = array(runif(28, 0, 1),dim=c(2,14)),
sigma.beta.c= runif(1, 0, 2),
sigma.beta.h= runif(1, 0, 2),
beta.b = runif(1, -5, 5),
beta.j = array(runif(288, 0, 1),dim=c(16,14)),
beta.d = runif(length(unique(pen_ao)), 0, 1),
sigma.beta.d= runif(1, 0, 2),
sigma.beta.j= runif(1, 0, 2),
beta.m = runif (2, 0, 1))}
# Parameters monitored
parameters <- c("beta.a", "beta.e", "beta.b",
"beta.t", "beta.m", "sigma2.beta.c",
"sigma2.beta.d", "sigma2.beta.h", "sigma2.beta.j",
"beta.c", "beta.d", "beta.h", "beta.j",
"epsilon.phi", "epsilon.p", "phi", "p")
# MCMC settings
ni <- 60000
nt <- 5
nb <- 30000
nc <- 3
# Call JAGS from R (JRT 55 min)
ao.cjs.trt.mass.cov.fixed4 <- jags(ao.data, parallel=TRUE, ao.inits, parameters, "ao-cjs-trt-mass-cov-fixed4.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(aa.cjs.trt.mass.cov.add5)#DIC=996.72
print(ao.cjs.trt.mass.cov.fixed4)
# Specify model in BUGS language
sink("aa-cjs-trt-mass-cov-add5.jags")
cat("
model {
## Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (1/(1+exp(-(beta.g1[group[i]] + beta.mass*mass[i] + beta.bl[block[i],t] + beta.pen[pen[i],t] + epsilon.phi[t]))))^int[t]
p[i,t] <- 1/(1+exp(-(beta.g2[group[i]] + beta.m[m[i,t]] + beta.bl1[block[i]] + beta.pen1[pen[i]])))
} #t
} #i
## For recapture
#mean.p~dnorm(0,0.001)
#mu.p<-1/(1+exp(-mean.p))           # Logit transformed recapture grand mean/intercept
for (u in 1:2){
beta.m[u] ~ dunif(0, 1)        # Priors for previous recapture effect
}
beta.g2[1] ~ dnorm(0, 0.01)I(-10,10)
beta.g2[2] ~ dnorm(0, 0.01)I(-10,10)      # Priors for difference in treatment-spec. recapture compared to treatment 1
beta.g2[3] ~ dnorm(0, 0.01)I(-10,10)
beta.g2[4] ~ dnorm(0, 0.01)I(-10,10)
for (b in 1:nblock){
beta.bl1[b] ~ dnorm(0,tau.beta.bl1)      #Prior for logit of mean recapture with random effect of block (random effect of block on p)
}
sigma.beta.bl1~dunif(0,5)
tau.beta.bl1<-pow(sigma.beta.bl1,-2)
sigma2.beta.bl1 <- pow(sigma.beta.bl1, 2)
for (p in 1:npen){
beta.pen1[p] ~ dnorm(0,tau.beta.pen1)    #Prior for logit of mean recapture with random effect of pen given block
}
sigma.beta.pen1~dunif(0,5)
tau.beta.pen1<-pow(sigma.beta.pen1,-2)
sigma2.beta.pen1 <- pow(sigma.beta.pen1, 2)
##For survival
#mean.phi~dnorm(0,0.001)
#mu.phi<-1/(1+exp(-mean.phi))             # Logit transformed survival grand mean/intercept
beta.g1[1] ~ dnorm(0, 0.01)I(-10,10)
beta.g1[2] ~ dnorm(0, 0.01)I(-10,10)      # Priors for difference in treatment-spec. survival compared to treatment 1
beta.g1[3] ~ dnorm(0, 0.01)I(-10,10)
beta.g1[4] ~ dnorm(0, 0.01)I(-10,10)
beta.mass ~ dnorm(0, 0.01)I(-10, 10)      # Prior for mass slope parameter
for (t in 1:(n.occasions-1)){
epsilon.phi[t] ~ dnorm(0, tau.phi)      # Prior for survival residuals
}
sigma.phi ~ dunif(0,5)                    # Prior on standard deviation
tau.phi <- pow(sigma.phi, -2)
sigma2.phi <- pow(sigma.phi, 2)           # Residual temporal variance
for (b in 1:nblock){
for (t in 1:(n.occasions-1)){
beta.bl[b,t] ~ dnorm(0,tau.beta.bl)   #Prior for logit of mean survival with random effect of block (random effect of block on phi)
}
}
sigma.beta.bl~dunif(0,5)
tau.beta.bl<-pow(sigma.beta.bl,-2)
sigma2.beta.bl <- pow(sigma.beta.bl, 2)
for (p in 1:npen){
for (t in 1:(n.occasions-1)){
beta.pen[p,t] ~ dnorm(0,tau.beta.pen)    #Prior for logit of mean survival with random effect of pen given block
}
}
sigma.beta.pen~dunif(0,10)
tau.beta.pen<-pow(sigma.beta.pen,-2)
sigma2.beta.pen <- pow(sigma.beta.pen, 2)
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
aa.data <- list(y = aa_CH, int=interval_aa$int, f = f_aa, nind = dim(aa_CH)[1], n.occasions = dim(aa_CH)[2], z = known.state.cjs(aa_CH),
nblock = length(unique(block_aa)), block = as.numeric(block_aa), npen = length(unique(pen_aa)), pen = as.numeric(pen_aa),
mass=stdmass_aa, g = length(unique(group_aa)), group=group_aa, m=m_aa)
# Initial values (probably need to adjust thse to match dimensions of certain parameters)
aa.inits <- function(){list(z = cjs.init.z(aa_CH,f_aa),
beta.g1 = rnorm(4),
beta.g2 = rnorm(4),
beta.bl1 = runif(length(unique(block_aa)), 0, 1),
beta.bl = array(runif(68, 0, 1),dim=c(4,16)),
beta.mass = runif(1, -5, 5),
beta.pen = array(runif(384, 0, 1),dim=c(24,16)),
beta.pen1 = runif(length(unique(pen_aa)), 0, 1),
beta.m = runif (2, 0, 1),
sigma.phi = runif(1, 0, 2),
sigma.p = runif(1, 0, 2),
sigma.beta.bl1= runif(1, 0, 2),
sigma.beta.bl= runif(1, 0, 2),
sigma.beta.pen1= runif(1, 0, 2),
sigma.beta.pen= runif(1, 0, 2))}
# Parameters monitored
parameters <- c( "beta.g1","beta.mass",
"beta.g2", "beta.m",
"sigma2.phi", "sigma2.p", "beta.bl1",
"beta.pen1", "beta.bl", "beta.pen",
"epsilon.phi", "epsilon.p", "phi", "p")
# MCMC settings
ni <- 60000
nt <- 5
nb <- 30000
nc <- 3
# Call JAGS from R (JRT 55 min)
aa.cjs.trt.mass.cov.add5 <- jags(aa.data, parallel=TRUE, aa.inits, parameters, "aa-cjs-trt-mass-cov-add5.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(aa.cjs.trt.mass.cov.add5)#DIC=996.72
# MCMC settings
ni <- 60000
nt <- 5
nb <- 30000
nc <- 3
# Call JAGS from R (JRT 55 min)
aa.cjs.trt.mass.cov.add5 <- jags(aa.data, parallel=TRUE, aa.inits, parameters, "aa-cjs-trt-mass-cov-add5.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(aa.cjs.trt.mass.cov.add5)#DIC=996.72
save.image("~/GitHub/JuvenileEmigrationPhenology/Code/AMAN_COE_CJS-Limited-Enviro-Jan22.RData")
plot(aa.cjs.trt.mass.cov.add5)
#Calculate phi distributions
phi.list<-as.data.frame(aa.cjs.trt.mass.cov.add5$mean$phi)
phi.l<-as.data.frame(aa.cjs.trt.mass.cov.add5$q2.5$phi)
phi.h<-as.data.frame(aa.cjs.trt.mass.cov.add5$q97.5$phi)
phi.listv<-as.matrix(aa.cjs.trt.mass.cov.add5$mean$phi)
phi.lv<-as.matrix(aa.cjs.trt.mass.cov.add5$q2.5$phi)
phi.hv<-as.matrix(aa.cjs.trt.mass.cov.add5$q97.5$phi)
phi.mean <- phi.list %>% summarise_all(mean, na.rm=TRUE)
phi.med <- phi.list %>% summarise_all(median, na.rm=TRUE)
phi.lower <- as.numeric(phi.l %>% summarise_all(mean, na.rm=TRUE))
phi.higher <- as.numeric(phi.h %>% summarise_all(mean, na.rm=TRUE))
mean(phi.listv, na.rm = TRUE) #mean survival = 0.87
median(phi.listv, na.rm = TRUE) #median survival= 0.95
sd(phi.listv, na.rm = TRUE)#0.20
phi.ci.low<-mean(phi.lv, na.rm = TRUE)#0.53
phi.ci.high<-mean(phi.hv, na.rm = TRUE)#0.98
phi.ci.low
phi.ci.high
g1.phi<-as.matrix(subset(phi.list[1:36,]))
g2.phi<-as.matrix(subset(phi.list[37:72,]))
g3.phi<-as.matrix(subset(phi.list[73:108,]))
g4.phi<-as.matrix(subset(phi.list[109:144,]))
g1.phi.dat<-as.data.frame(subset(phi.list[1:36,]))
g2.phi.dat<-as.data.frame(subset(phi.list[37:72,]))
g3.phi.dat<-as.data.frame(subset(phi.list[73:108,]))
g4.phi.dat<-as.data.frame(subset(phi.list[109:144,]))
g1.phil<-as.data.frame(subset(phi.l[1:36,])) #Spp.-specific lower CI
g2.phil<-as.data.frame(subset(phi.l[37:72,]))
g3.phil<-as.data.frame(subset(phi.l[73:108,]))
g4.phil<-as.data.frame(subset(phi.l[109:144,]))
g1.phih<-as.data.frame(subset(phi.h[1:36,])) #spp.-specific upper CI
g2.phih<-as.data.frame(subset(phi.h[37:72,]))
g3.phih<-as.data.frame(subset(phi.h[73:108,]))
g4.phih<-as.data.frame(subset(phi.h[109:144,]))
phi.g1 <- g1.phi.dat %>% summarise_all(mean)
phi.g2 <- g2.phi.dat %>% summarise_all(mean)
phi.g3 <- g3.phi.dat %>% summarise_all(mean)
phi.g4 <- g4.phi.dat %>% summarise_all(mean)
phi.g1.med <- g1.phi.dat %>% summarise_all(median)
phi.g2.med <- g2.phi.dat %>% summarise_all(median)
phi.g3.med <- g3.phi.dat %>% summarise_all(median)
phi.g4.med <- g4.phi.dat %>% summarise_all(median)
g1.low<-as.numeric(g1.phil %>% summarise_all(mean, na.rm=TRUE))
g1.high<-as.numeric(g1.phih %>% summarise_all(mean, na.rm=TRUE))
g2.low<-as.numeric(g2.phil %>% summarise_all(mean, na.rm=TRUE))
g2.high<-as.numeric(g2.phih %>% summarise_all(mean, na.rm=TRUE))
g3.low<-as.numeric(g3.phil %>% summarise_all(mean, na.rm=TRUE))
g3.high<-as.numeric(g3.phih %>% summarise_all(mean, na.rm=TRUE))
g4.low<-as.numeric(g4.phil %>% summarise_all(mean, na.rm=TRUE))
g4.high<-as.numeric(g4.phih %>% summarise_all(mean, na.rm=TRUE))
x.g1.phi<-mean(g1.phi)#Overall spp. means
x.g2.phi<-mean(g2.phi)
x.g3.phi<-mean(g3.phi)
x.g4.phi<-mean(g4.phi)
med.g1.phi<-median(g1.phi)#Overall treatment medians
med.g2.phi<-median(g2.phi)
med.g3.phi<-median(g3.phi)
med.g4.phi<-median(g4.phi)
means.phi<-c(x.g1.phi, x.g2.phi, x.g3.phi, x.g4.phi)#0.8700113 0.8553893 0.8569909 0.8669944
meds.phi<-c(med.g1.phi, med.g2.phi, med.g3.phi, med.g4.phi) #0.9507267 0.9405564 0.9442335 0.9517203
sd.g1.phi<-sd(g1.phi)
sd.g2.phi<-sd(g2.phi)
sd.g3.phi<-sd(g3.phi)
sd.g4.phi<-sd(g4.phi)
sd.phi<-c(sd.g1.phi, sd.g2.phi, sd.g3.phi, sd.g4.phi)#0.1978787 0.2033943 0.2055896 0.2017135
means.phi
meds.phi
sd.phi
#Figure of treatment-specific temporal survival
par(mai=c(2,2,1,1), mgp=c(5,2,0))
plot(x=(1:16),y= phi.g1.med, type="b", pch=1, col="salmon1",lty=3, cex=2.5, lwd=3, bty='l',
ylim=c(0,1), ylab="Survival probability", xlab="Recapture occasion", cex.lab=2.5, cex.axis=2.5)
segments((1:16), g1.low, (1:16), g1.high, col="salmon1", lwd=2)
points(x=(1:16)+.1,phi.g2.med, type="b", pch=6, col="deepskyblue3", lty=2, cex=2.5, lwd=2)
segments((1:16)+.1, g2.low, (1:16)+.1, g2.high, col="deepskyblue3", lwd=2)
points(x=(1:16)+.2,phi.g3.med, type="b", pch=0, col="midnightblue", lty=1, cex=2.5, lwd=2)
segments((1:16)+.2, g3.low, (1:16)+.2, g3.high, col="midnightblue", lwd=2)
points(x=(1:16)+.3,phi.g4.med, type="b", pch=5, col="orangered4", lty=4, cex=2.5, lwd=2)
segments((1:16)+.3, g4.low, (1:16)+.3, g4.high, col="orangered4", lwd=2)
legend(x = 10, y=.5, bty = 'n',
#legend=c(as.expression(bquote(italic(.("Ambystoma annulatum")))),as.expression(bquote(italic(.("Ambystoma maculatum")))), as.expression(bquote(italic(.("Ambystoma texanum"))))),
legend=c("L1J1", "L1J3", "L3J1", "L3J3"),
lwd=c(3,2,2), pch=c(1,6,0,5), lty=c(3,2,1,4), cex=2.5,  col=c("salmon1", "deepskyblue3", "midnightblue", "orangered4"))
#Calculate recapture distributions
p.list<-as.data.frame(aa.cjs.trt.mass.cov.add5$mean$p)
p.l<-as.data.frame(aa.cjs.trt.mass.cov.add5$q2.5$p)
p.h<-as.data.frame(aa.cjs.trt.mass.cov.add5$q97.5$p)
p.listv<-as.matrix(aa.cjs.trt.mass.cov.add5$mean$p)
p.lv<-as.matrix(aa.cjs.trt.mass.cov.add5$q2.5$p)
p.hv<-as.matrix(aa.cjs.trt.mass.cov.add5$q97.5$p)
p.mean <- p.list %>% summarise_all(mean, na.rm=TRUE)
p.med <- p.list %>% summarise_all(median, na.rm=TRUE)
p.lower <- as.numeric(p.l %>% summarise_all(mean, na.rm=TRUE))
p.higher <- as.numeric(p.h %>% summarise_all(mean, na.rm=TRUE))
mean(p.listv, na.rm = TRUE) #mean survival = 0.30
median(p.listv, na.rm = TRUE) #median survival= 0.27
sd(p.listv, na.rm = TRUE)#0.09
p.ci.low<-mean(p.lv, na.rm = TRUE)#0.19
p.ci.high<-mean(p.hv, na.rm = TRUE)#0.45
p.ci.low
p.ci.high
g1.p<-as.matrix(subset(p.list[1:36,]))
g2.p<-as.matrix(subset(p.list[37:72,]))
g3.p<-as.matrix(subset(p.list[73:108,]))
g4.p<-as.matrix(subset(p.list[109:164,]))
g1.p.dat<-as.data.frame(subset(p.list[1:36,]))
g2.p.dat<-as.data.frame(subset(p.list[37:72,]))
g3.p.dat<-as.data.frame(subset(p.list[73:108,]))
g4.p.dat<-as.data.frame(subset(p.list[109:164,]))
g1.pl<-as.data.frame(subset(p.l[1:36,])) #Spp.-specific lower CI
g2.pl<-as.data.frame(subset(p.l[37:72,]))
g3.pl<-as.data.frame(subset(p.l[73:108,]))
g4.pl<-as.data.frame(subset(p.l[109:164,]))
g1.ph<-as.data.frame(subset(p.h[1:36,])) #spp.-specific upper CI
g2.ph<-as.data.frame(subset(p.h[37:72,]))
g3.ph<-as.data.frame(subset(p.h[73:108,]))
g4.ph<-as.data.frame(subset(p.h[109:164,]))
p.g1 <- g1.p.dat %>% summarise_all(mean)
p.g2 <- g2.p.dat %>% summarise_all(mean)
p.g3 <- g3.p.dat %>% summarise_all(mean)
p.g4 <- g4.p.dat %>% summarise_all(mean)
p.g1.med <- g1.p.dat %>% summarise_all(median)
p.g2.med <- g2.p.dat %>% summarise_all(median)
p.g3.med <- g3.p.dat %>% summarise_all(median)
p.g4.med <- g4.p.dat %>% summarise_all(median)
g1.low<-as.numeric(g1.pl %>% summarise_all(mean, na.rm=TRUE))
g1.high<-as.numeric(g1.ph %>% summarise_all(mean, na.rm=TRUE))
g2.low<-as.numeric(g2.pl %>% summarise_all(mean, na.rm=TRUE))
g2.high<-as.numeric(g2.ph %>% summarise_all(mean, na.rm=TRUE))
g3.low<-as.numeric(g3.pl %>% summarise_all(mean, na.rm=TRUE))
g3.high<-as.numeric(g3.ph %>% summarise_all(mean, na.rm=TRUE))
g4.low<-as.numeric(g4.pl %>% summarise_all(mean, na.rm=TRUE))
g4.high<-as.numeric(g4.ph %>% summarise_all(mean, na.rm=TRUE))
x.g1.p<-mean(g1.p)#Overall spp. means
x.g2.p<-mean(g2.p)
x.g3.p<-mean(g3.p)
x.g4.p<-mean(g4.p)
med.g1.p<-median(g1.p)#Overall treatment medians
med.g2.p<-median(g2.p)
med.g3.p<-median(g3.p)
med.g4.p<-median(g4.p)
means.p<-c(x.g1.p, x.g2.p, x.g3.p, x.g4.p)#0.2820788 0.2848755 0.2966071 0.3276752
meds.p<-c(med.g1.p, med.g2.p, med.g3.p, med.g4.p) #0.2540890 0.2540890 0.2790220 0.2879549
sd.g1.p<-sd(g1.p)
sd.g2.p<-sd(g2.p)
sd.g3.p<-sd(g3.p)
sd.g4.p<-sd(g4.p)
sd.p<-c(sd.g1.p, sd.g2.p, sd.g3.p, sd.g4.p)#0.2372395 0.2419790 0.2360986 0.2347370
means.p
meds.p
sd.p
#Group effect on recapture
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]), xlim=c(-3,3))#L1J1
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]), col=2)#L1J3
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3]), col=3)#L3J1
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4]), col=4)#L3J3
#If difference of posteriors overlaps zero, no significant difference
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4]))
#Calculate % of posterior of differences overlapping zero
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,3]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g2[,4])) * 100
#Group effect on survival
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]), xlim=c(-3,8))#L3J3
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]), col=2)#L3J1
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3]), col=3)#L1J3
lines(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4]), col=4)#L1J1
#If difference of posteriors overlaps zero, no significant difference
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4]))
plot(density(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3]))
#Calculate % of posterior of differences overlapping zero
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,3])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,4])) * 100
(sum(ifelse((aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2])<=0,1,0))/
sum(aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,1]-aa.cjs.trt.mass.cov.add5$sims.list$beta.g1[,2])) * 100
# Specify model in BUGS language
sink("aa-cjs-trt-mass-cov-ctmax.jags")
sink()
print(aa.cjs.trt.mass.cov.add4)#DIC=996.72
# Specify model in BUGS language
sink("aa-cjs-trt-mass-cov-add4.jags")
cat("
model {
## Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (1/(1+exp(-( beta.g1[group[i]] + beta.mass*mass[i] + beta.bl[block[i],t] + beta.pen[pen[i],t] + epsilon.phi[t]))))^int[t]
p[i,t] <- 1/(1+exp(-(beta.g2[group[i]] + beta.m[m[i,t]] + beta.bl1[block[i]] + beta.pen1[pen[i]])))
} #t
} #i
## For recapture
#mean.p~dnorm(0,0.001)
#mu.p<-1/(1+exp(-mean.p))           # Logit transformed recapture grand mean/intercept
for (u in 1:2){
beta.m[u] ~ dunif(0, 1)        # Priors for previous recapture effect
}
beta.g2[1] <- 0                           # Corner constraint
beta.g2[2] ~ dnorm(0, 0.01)I(-10,10)      # Priors for difference in treatment-spec. recapture compared to treatment 1
beta.g2[3] ~ dnorm(0, 0.01)I(-10,10)
beta.g2[4] ~ dnorm(0, 0.01)I(-10,10)
for (b in 1:nblock){
beta.bl1[b] ~ dnorm(0,tau.beta.bl1)      #Prior for logit of mean recapture with random effect of block (random effect of block on p)
}
sigma.beta.bl1~dunif(0,5)
tau.beta.bl1<-pow(sigma.beta.bl1,-2)
sigma2.beta.bl1 <- pow(sigma.beta.bl1, 2)
for (p in 1:npen){
beta.pen1[p] ~ dnorm(0,tau.beta.pen1)    #Prior for logit of mean recapture with random effect of pen given block
}
sigma.beta.pen1~dunif(0,5)
tau.beta.pen1<-pow(sigma.beta.pen1,-2)
sigma2.beta.pen1 <- pow(sigma.beta.pen1, 2)
##For survival
#mean.phi~dnorm(0,0.001)
#mu.phi<-1/(1+exp(-mean.phi))             # Logit transformed survival grand mean/intercept
beta.g1[1] <- 0                           # Corner constraint
beta.g1[2] ~ dnorm(0, 0.01)I(-10,10)      # Priors for difference in treatment-spec. survival compared to treatment 1
beta.g1[3] ~ dnorm(0, 0.01)I(-10,10)
beta.g1[4] ~ dnorm(0, 0.01)I(-10,10)
beta.mass ~ dnorm(0, 0.01)I(-10, 10)      # Prior for mass slope parameter
for (t in 1:(n.occasions-1)){
epsilon.phi[t] ~ dnorm(0, tau.phi)      # Prior for survival residuals
}
sigma.phi ~ dunif(0,5)                    # Prior on standard deviation
tau.phi <- pow(sigma.phi, -2)
sigma2.phi <- pow(sigma.phi, 2)           # Residual temporal variance
for (b in 1:nblock){
for (t in 1:(n.occasions-1)){
beta.bl[b,t] ~ dnorm(0,tau.beta.bl)   #Prior for logit of mean survival with random effect of block (random effect of block on phi)
}
}
sigma.beta.bl~dunif(0,5)
tau.beta.bl<-pow(sigma.beta.bl,-2)
sigma2.beta.bl <- pow(sigma.beta.bl, 2)
for (p in 1:npen){
for (t in 1:(n.occasions-1)){
beta.pen[p,t] ~ dnorm(0,tau.beta.pen)    #Prior for logit of mean survival with random effect of pen given block
}
}
sigma.beta.pen~dunif(0,10)
tau.beta.pen<-pow(sigma.beta.pen,-2)
sigma2.beta.pen <- pow(sigma.beta.pen, 2)
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
aa.data <- list(y = aa_CH, int=interval_aa$int, f = f_aa, nind = dim(aa_CH)[1], n.occasions = dim(aa_CH)[2], z = known.state.cjs(aa_CH),
nblock = length(unique(block_aa)), block = as.numeric(block_aa), npen = length(unique(pen_aa)), pen = as.numeric(pen_aa),
mass=stdmass_aa, g = length(unique(group_aa)), group=group_aa, m=m_aa)
# Initial values (probably need to adjust thse to match dimensions of certain parameters)
aa.inits <- function(){list(z = cjs.init.z(aa_CH,f_aa),
beta.g1 = c(NA, rnorm(3)),
beta.g2 = c(NA, rnorm(3)),
beta.bl1 = runif(length(unique(block_aa)), 0, 1),
beta.bl = array(runif(68, 0, 1),dim=c(4,16)),
beta.mass = runif(1, -5, 5),
beta.pen = array(runif(384, 0, 1),dim=c(24,16)),
beta.pen1 = runif(length(unique(pen_aa)), 0, 1),
beta.m = runif (2, 0, 1),
sigma.phi = runif(1, 0, 2),
sigma.p = runif(1, 0, 2),
sigma.beta.bl1= runif(1, 0, 2),
sigma.beta.bl= runif(1, 0, 2),
sigma.beta.pen1= runif(1, 0, 2),
sigma.beta.pen= runif(1, 0, 2))}
# Parameters monitored
parameters <- c( "beta.g1","beta.mass",
"sigma2.phi", "beta.m",
"beta.g2", "sigma2.p", "beta.bl1",
"beta.pen1", "beta.bl", "beta.pen",
"epsilon.phi", "epsilon.p", "phi", "p")
# MCMC settings
ni <- 20000
nt <- 5
nb <- 8000
nc <- 3
# Call JAGS from R (JRT 55 min)
aa.cjs.trt.mass.cov.add4 <- jags(aa.data, parallel=TRUE, aa.inits, parameters, "aa-cjs-trt-mass-cov-add4.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(aa.cjs.trt.mass.cov.add4)#DIC=996.72
# MCMC settings
ni <- 60000
nt <- 5
nb <- 30000
nc <- 3
# Call JAGS from R (JRT 55 min)
aa.cjs.trt.mass.cov.add4 <- jags(aa.data, parallel=TRUE, aa.inits, parameters, "aa-cjs-trt-mass-cov-add4.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(aa.cjs.trt.mass.cov.add4)#DIC=996.72
save.image("~/GitHub/JuvenileEmigrationPhenology/Code/AMAN_COE_CJS-Limited-Enviro-Jan22.RData")
