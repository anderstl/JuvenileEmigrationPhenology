## Load Packages:
## --------------
require(tidyr)
require(readxl)
require(ggplot2)
require(dplyr)
library(lattice)
library(coda)
library(jagsUI)
library(mcmcplots)
aa_recaps <- read.csv("~/GitHub/JuvenileEmigrationPhenology/Data/AMAN/AMAN_phenology_recap_data_master.csv", header=T)           ## recapture data
aa_assign <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMAN/Aa_COEffects_Pen_Assignments.xlsx")             ## initial pen assignments
aa_treats <- read.csv("~/GitHub/JuvenileEmigrationPhenology/Data/AMAN/Aa_COEffects_Treatments.csv", header=T)           ## treatment data
aa_tagged <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMAN/Aa_COEffects_Tagged_Animals.xlsx")              ## all tagged animals and metamorphosis sizes
## Format/Merge Data:
## ------------------
doy.adj <- 172                           ## DOY value to standardize values to June 21, 2018
aa_recaps <- subset(aa_recaps, aa_recaps$Notes != "Arianne Salamander")
aa_recaps$DOY <- as.numeric(format(as.Date(as.character(aa_recaps$Recap_Date),"%m/%d/%Y"),"%j"))
aa_recaps$DOY_adj <- ifelse(aa_recaps$DOY >= doy.adj, yes=aa_recaps$DOY-(doy.adj-1), no=aa_recaps$DOY+(365-doy.adj+1))
aa_recaps$DOY_adj[aa_recaps$Recap_Date=="7/6/2019"]<-365+aa_recaps$DOY_adj[aa_recaps$Recap_Date=="7/6/2019"] #adjust one value that spanned years
aa_recaps$Rel.DOY <- as.numeric(format(as.Date(as.character(aa_recaps$Release),"%m/%d/%Y"),"%j"))
aa_recaps$Rel.DOY_adj <- ifelse(aa_recaps$Rel.DOY >= doy.adj, yes=aa_recaps$Rel.DOY-(doy.adj-1), no=recaps$Rel.DOY+(365-doy.adj+1))
aa_recaps$Recap_Loc <- as.character(aa_recaps$Recap_Loc)
aa_recaps$Re.Block <- NULL
aa_recaps$Re.Pen <- NULL
aa_recaps$Re.Micro <- NULL
for(i in 1:dim(aa_recaps)[1]) {
aa_recaps$Re.Block[i] <- unlist(strsplit(aa_recaps$Recap_Loc[i], ","))[1]
aa_recaps$Re.Pen[i] <- unlist(strsplit(aa_recaps$Recap_Loc[i], ","))[2]
aa_recaps$Re.Micro[i] <- unlist(strsplit(aa_recaps$Recap_Loc[i], ","))[3]
}
aa_assign$Release_DOY <- as.numeric(format(as.Date(as.character(aa_assign$Release_Date), "%Y-%m-%d"),"%j"))
aa_assign$DOY_adj <- ifelse(aa_assign$Release_DOY >= doy.adj, yes=aa_assign$Release_DOY-(doy.adj-1), no=aa_assign$Release_DOY+(365-doy.adj+1))
aa_tagged$Meta.DOY <- as.numeric(format(as.Date(as.character(aa_tagged$Meta.Date), "%Y-%m-%d"),"%j"))
aa_tagged$Meta.DOY_adj <- ifelse(aa_tagged$Meta.DOY >= doy.adj, yes=aa_tagged$Meta.DOY-(doy.adj-1), no=aa_tagged$Meta.DOY+(365-doy.adj+1))
aa_tagged$Tag.DOY <- as.numeric(format(as.Date(as.character(aa_tagged$Tag.Date), "%Y-%m-%d"),"%j"))
aa_tagged$Tag.DOY_adj <- ifelse(aa_tagged$Tag.DOY >= doy.adj, yes=aa_tagged$Tag.DOY-(doy.adj-1), no=aa_tagged$Tag.DOY+(365-doy.adj+1))
df.a <- merge(aa_assign, aa_tagged, by="PIT_Tag", type="left")
aa_df <- merge(aa_recaps, df.a, by="PIT_Tag", type="left")
aa_df$Moved <- ifelse(is.na(aa_df$Moved)==T, yes=0, no=aa_df$Moved)
aa_df$Pre.Alive <- aa_df$Moved + aa_df$Pre_Alive
aa_df$Pre.Alive <- ifelse(aa_df$Pre.Alive >= 1, yes=1, no=0)
## Create Capture History Matrix (messy... needs cleaned later)
aa_ch.pa <- matrix(0, nrow=dim(aa_assign)[1], ncol=max(as.numeric(aa_recaps$Period), na.rm=T)+5)
aa_ch.pa <- as.data.frame(aa_ch.pa)
colnames(aa_ch.pa)[1:4] <- c("PIT_Tag", "Treatment", "Block", "Pen")
aa_ch.pa$PIT_Tag <- aa_assign$PIT_Tag
aa_ch.pa$Treatment <- aa_assign$Treatment
aa_ch.pa$Block <- aa_assign$Block
aa_ch.pa$Pen <- aa_assign$Pen
aa_ch.pa[,5] <- 1
aa_recaps$Moved <- ifelse(is.na(aa_recaps$Moved)==T, yes=0, no=aa_recaps$Moved)
# recaps$Visual <- ifelse(recaps$Visual == 2, yes=0, no=recaps$Visual)
aa_recaps$Pre.Alive <- aa_recaps$Moved + aa_recaps$Pre_Alive
aa_recaps$Pre.Alive <- ifelse(aa_recaps$Pre.Alive >= 1, yes=1, no=0)
ag.recaps <- aggregate(aa_recaps$Pre.Alive, by=list(aa_recaps$PIT_Tag, aa_recaps$Period), FUN='sum')
colnames(ag.recaps) <- c("PIT_Tag", "Period", "Nobs")
ag.recaps$Pre.Alive <- ag.recaps$Nobs
ag.recaps$Pre.Alive <- ifelse(ag.recaps$Pre.Alive >= 1, yes=1, no=ag.recaps$Pre.Alive)
for(i in 1:dim(aa_ch.pa)[1]){
ind <- aa_ch.pa$PIT_Tag[i]
sdf <- subset(ag.recaps, ag.recaps$PIT_Tag == ind)
if(dim(sdf)[1]>0){
for(c in 6:dim(aa_ch.pa)[2]){
for(s in 1:dim(sdf)[1]){
p <- sdf$Period[s]
if((c-5) == p){
aa_ch.pa[i,c] <- sdf$Pre.Alive[s]
}
}
}
}
}
## isolate capture history matrix data only.
aa_CH <- as.matrix(aa_ch.pa[,5:dim(aa_ch.pa)[2]])
#add mass to data frame
aa_ch.pa<-merge(aa_ch.pa,aa_tagged[,c("PIT_Tag","Meta.Mass","Meta.Date")],by=c("PIT_Tag"))
aa_ch.pa<-aa_ch.pa[-(aa_ch.pa$PIT_Tag=="x0966" & aa_ch.pa$Meta.Mass==2.21),]#drop duplicate mass?
## ------------------
## Analyze Survival:
## -----------------
# Initial values
# In JAGS we have to give good initial values for the latent state z. At all occasions when an individual was observed, its state
# is z = 1 for sure. In addition, if an individual was not observed at an occasion, but was alive for sure, because it was
# observed before and thereafter (i.e. has a capture history of e.g. {101} or {10001}), then we know that the individual was alive
# at all of these occasions, and thus z = 1. Therefore, we should provide initial values of z = 1 at these positions as well. The
# following function provides such initial values from the observed capture histories:
known.state.cjs <- function(ch){
state <- ch
for (i in 1:dim(ch)[1]){
n1 <- min(which(ch[i,]==1))
n2 <- max(which(ch[i,]==1))
state[i,n1:n2] <- 1
state[i,n1] <- NA
}
state[state==0] <- NA
return(state)
}
# Function to create a matrix of initial values for latent state z
cjs.init.z <- function(ch,f){
for (i in 1:dim(ch)[1]){
if (sum(ch[i,])==1) next
n2 <- max(which(ch[i,]==1))
ch[i,f[i]:n2] <- NA
}
for (i in 1:dim(ch)[1]){
ch[i,1:f[i]] <- NA
}
return(ch)
}
# Create vector with occasion of marking
get.first <- function(x) min(which(x!=0))
f_aa <- apply(aa_CH, 1, get.first)
# Create matrix m to indicate when an individual was captured, to address test 2.ct trap effect
m_aa<-aa_CH[,1:(dim(aa_CH)[2]-1)]
u_aa<-which (m_aa==0)
m_aa[u_aa]<-2
#calculate unequal interval lengths
#interval next to event 1 was calculated from the time of release (event 0).
#The last interval is then between the last and second to last events)
interval_aa<-aa_recaps%>%
group_by(as.factor(Period))%>%
dplyr::summarise(min.int=min(DOY_adj,na.rm=T),max.int=max(DOY_adj,na.rm=T))
interval_aa$days<-c(rep(NA,length=nrow(interval_aa)))
interval_aa$days[1]<-14
#int.days<-diff(interval$DOY_adj)
for(i in 1:(nrow(interval_aa)-1)){
interval_aa$days[i+1]<-(interval_aa$min.int[i+1]-interval_aa$max.int[i])
}
interval_aa$int<-interval_aa$days/mean(interval_aa$days)
sink("amb-cjs-c-c.jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (mean.phi)^int[t]               # Constant survival
p[i,t] <- beta[m[i,t]]                  # Constant recapture
} #t
} #i
mean.phi ~ dunif(0, 1)         # Prior for mean survival
for(u in 1:2){
beta[u] ~ dunif(0, 1)         # Priors for recapture
}
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
aa_jags.data <- list(y = aa_CH, int=interval_aa$int, f = f_aa, m=m_aa, nind = dim(aa_CH)[1],
n.occasions = dim(aa_CH)[2], z = known.state.cjs(aa_CH))
# Initial values
inits <- function(){list(mean.phi = runif(1, 0, 1), beta = runif(2, 0, 1), z = cjs.init.z(aa_CH,f_aa))}
# Parameters monitored
parameters <- c("mean.phi", "beta", "phi", "p")
# MCMC settings
ni <- 50000
nt <- 10
nb <- 25000
nc <- 3
# Call JAGS from R (BRT 1 min)
amb.cjs.c.c <- jags(aa_jags.data, inits, parallel=TRUE, parameters, "amb-cjs-c-c.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
# Summarize posteriors
print(amb.cjs.c.c, digits = 3)
sink("amb-cjs-t-t.jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (alpha[t])^int[t]
logit(p[i,t]) <- beta[m[i,t]] + epsilon[t]
} #t
} #i
for (t in 1:(n.occasions-1)){
alpha[t] ~ dunif(0, 1)        # Priors for time-specific survival
}
for (u in 1:2){
beta[u] ~ dunif(0, 1)        # Priors for time-specific recapture
}
for (t in 1:(n.occasions-1)){
epsilon[t] ~ dnorm(0, tau)
}
sigma ~ dunif(0, 10)                     # Prior for standard deviation
tau <- pow(sigma, -2)
sigma2 <- pow(sigma, 2)                  # Residual temporal variance
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
aa_jags.data <- list(y = aa_CH, m=m_aa, int=interval_aa$int, f = f_aa, nind = dim(aa_CH)[1],
n.occasions = dim(aa_CH)[2])
# Initial values
inits <- function(){list(beta = runif(2, 0, 1), sigma = runif(1,0,2),
alpha = runif(dim(aa_CH)[2]-1, 0, 1), z = known.state.cjs(aa_CH))}
# Parameters monitored
parameters <- c("alpha", "beta", "sigma2", "phi", "p")
## MCMC settings
ni <- 50000
nt <- 10
nb <- 25000
nc <- 3
# Call JAGS from R (BRT 2 min)
amb.cjs.t.t <- jags(aa_jags.data, parallel=TRUE, inits, parameters, "amb-cjs-t-t.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(amb.cjs.t.t)
sink("amb-cjs-t-c.jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (alpha[t])^int[t]              # Time-dependent survival
p[i,t] <- beta[m[i,t]]                  # Constant recapture
} #t
} #i
for(u in 1:2){
beta[u] ~ dunif(0, 1)         # Priors for recapture
}
for (t in 1:(n.occasions-1)){
alpha[t] ~ dunif(0, 1)        # Prior for time-dependent survival
}
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
aa_jags.data <- list(y = aa_CH, m=m_aa, int=interval_aa$int, f = f_aa, nind = dim(aa_CH)[1], n.occasions = dim(aa_CH)[2])
# Initial values
inits <- function(){list(beta = runif(2, 0, 1), alpha = runif(dim(aa_CH)[2]-1, 0, 1),
z = known.state.cjs(aa_CH))}
# Parameters monitored
parameters <- c("alpha", "mean.p", "beta","phi", "p")
# MCMC settings
ni <- 50000
nt <- 10
nb <- 25000
nc <- 3
# Call JAGS from R (BRT 2 min)
amb.cjs.t.c <- jags(aa_jags.data, parallel=TRUE, inits, parameters, "amb-cjs-t-c.jags", n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
print(amb.cjs.t.c)
sink("amb-cjs-c-t.jags")
cat("
model {
# Priors and constraints
for (i in 1:nind){
for (t in f[i]:(n.occasions-1)){
phi[i,t] <- (mean.phi)^int[t]              # Constant survival
logit(p[i,t]) <- beta[m[i,t]] + epsilon[t]  # Time-dependent recapture
} #t
} #i
mean.phi ~ dunif(0,1)         # Prior for time-constant survival
for (u in 1:2){
beta[u] ~ dunif(0, 1)        # Priors for time-dependent recapture
}
for (t in 1:(n.occasions-1)){
epsilon[t] ~ dnorm(0, tau)
}
sigma ~ dunif(0, 10)                     # Prior for standard deviation
tau <- pow(sigma, -2)
sigma2 <- pow(sigma, 2)                  # Residual temporal variance
# Likelihood
for (i in 1:nind){
# Define latent state at first capture
z[i,f[i]] <- 1
for (t in (f[i]+1):n.occasions){
# State process
z[i,t] ~ dbern(mu1[i,t])
mu1[i,t] <- phi[i,t-1] * z[i,t-1]
# Observation process
y[i,t] ~ dbern(mu2[i,t])
mu2[i,t] <- p[i,t-1] * z[i,t]
} #t
} #i
}
",fill = TRUE)
sink()
# Bundle data
aa_jags.data <- list(y = aa_CH, int=interval_aa$int, f = f_aa, nind = dim(aa_CH)[1], n.occasions = dim(aa_CH)[2], m=m_aa)
# Initial values
inits <- function(){list(mean.phi = runif(1, 0, 1), beta = runif(2, 0, 1), z = known.state.cjs(aa_CH),
sigma = runif(1, 0, 2))}
# Parameters monitored
parameters <- c("beta", "mean.phi", "sigma2", "phi", "p")
# MCMC settings
ni <- 50000
nt <- 10
nb <- 25000
nc <- 3
# Call JAGS from R (BRT 1.87 min)
amb.cjs.c.t <- jags(aa_jags.data, parallel=TRUE, inits, parameters, "amb-cjs-c-t.jags",
n.chains = nc, n.thin = nt, n.iter = ni, n.burnin = nb)
## Load Packages:
## --------------
if(!require(tidyr)) install.packages('tidyr'); library("tidyr")
if(!require(readxl)) install.packages('readxl'); library("readxl")
if(!require(ggplot2)) install.packages('ggplot2'); library("ggplot2")
if(!require(dplyr)) install.packages('dplyr'); library("dplyr")
if(!require(viridis)) install.packages('viridis'); library("viridis")
## --------------
#Nick's IPR theme
my_theme2 <- function()
{
cowplot::theme_cowplot() %+replace%
theme(panel.background = element_rect(color = "black", size=0.75,
linetype=1),
panel.border = element_rect(colour = "black", fill=NA, size=0.75),
axis.line=element_blank(),
strip.background=element_rect(fill='white'),
strip.text=element_text(size=12, face='bold'))
}
recaps <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Recap_Database_2019-2020-Experiments_Master_20200125.xlsx", sheet=2,na=c("NA", ""))## recapture data
penID <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Pens_Assignments_2019-2020-Experiments.xlsx", na=c("NA", ""))
endfates<-read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/BreakdownFates_2019-2020-Experiments.xlsx",na=c("NA",""))
sex<-read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Siegel Salamander data.xlsx",na=c("NA",""))
endfates<-merge(endfates,sex,by="PIT_Tag")
endfates<-merge(endfates,penID,by=c("PIT_Tag","Juv.Treat","Juv.Pen","Treatment","Species"))
## Format/Merge Data:
## ------------------
DOY.adj <- 157                           ## Standardize DOY to date of first release- 07 June 2019
recaps<-recaps%>%
#mutate(mutate(across(where(is.character), as.factor)))%>%
filter(!grepl("^UNK.",PIT_Tag))%>% #untagged animals we caught
filter(!grepl("Arianne",Notes))%>%
filter(!(Period%in%c("R1","R2","R3")))%>% #release periods
filter(PIT_Tag!="x0992")%>% #tag from last year
mutate(DOY = as.numeric(format(as.Date(as.character(Recap_Date),"%Y-%m-%d"),"%j")),
DOY_adj = ifelse(DOY >= DOY.adj, yes=DOY-(DOY.adj-1), no=DOY+(365-DOY.adj+1)),
Rel.DOY = as.numeric(format(as.Date(as.character(Release),"%Y-%m-%d"),"%j")),
Rel.DOY_adj = ifelse(Rel.DOY >= DOY.adj, yes=Rel.DOY-(DOY.adj-1), no=Rel.DOY+(365-DOY.adj+1)),
Recap_Loc = as.character(Recap_Loc),
Rc.Block = sapply(strsplit(Recap_Loc, ","), function(x) x[1]),
Rc.Pen = sapply(strsplit(Recap_Loc, ","), function(x) x[2]),
Rc.Micro = sapply(strsplit(Recap_Loc, ","), function(x) x[3]),
Moved = ifelse(is.na(Moved)==T, yes=0, no=Moved),
Visual = ifelse(is.na(Visual)==T | Visual==2, yes=0, no=Visual),
Burr_Vis = ifelse(is.na(Burr_Vis)==T, yes=0, no=Burr_Vis),
Pre.Alive = (Moved + Visual + Burr_Vis),
Pre.Alive = ifelse(Pre.Alive >= 1, yes=1, no=0))
recaps<-recaps%>%
mutate(DOY_adj1=if_else(Recap_Date>"2020-06-06",DOY_adj+365,DOY_adj))
penID<-penID%>%
select("PIT_Tag","Species","Juv.Pen","Juv.Treat","Meta.Mass.g")%>%
mutate(Rel.Block = sapply(strsplit(Juv.Pen, ","), function(x) x[1]),
Rel.Pen = sapply(strsplit(Juv.Pen, ","), function(x) x[2]))%>%
mutate(across(where(is.character), as.factor))
df <- merge(recaps, penID, by=c("PIT_Tag"),all.x=T)
ao_df<- df%>%
filter(as.factor(Juv.Treat)%in%c("L3-J1","L3-J3","L1-J1","L1-J3"))
ag.recaps<-ao_df%>%
mutate(Period=as.numeric(as.character(Period)))%>%
group_by(PIT_Tag,Juv.Treat,Rel.Block,Rel.Pen,Period)%>%
summarise(Nobs=sum(Pre.Alive))%>%
mutate(Pre.Alive=Nobs)%>%
mutate(Pre.Alive=if_else(Pre.Alive>=1,1,Pre.Alive))%>%
select(!Nobs)%>%
droplevels()
#pivot to wide format
ao_ch.pa<-ag.recaps%>%
pivot_wider(names_from = Period,values_from=Pre.Alive,values_fill=0,names_sort=T,names_prefix="R")%>%
mutate(`R1`=rep(1))%>% #starting vector where they are all alive
relocate(`R1`, .after = Rel.Pen)
#pivot to wide format
ao_ch.pa<-ag.recaps%>%
pivot_wider(names_from = Period,values_from=Pre.Alive,values_fill=0,names_sort=TRUE,names_prefix="R")%>%
mutate(`R1`=rep(1))%>% #starting vector where they are all alive
relocate(`R1`, .after = Rel.Pen)
ao_recaps <- read.csv("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/AMOP_phenology_recap_data_master.csv", header=T)           ## recapture data
## Import Data:
## --------------------------------
recaps <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Recap_Database_2019-2020-Experiments_Master_20200125.xlsx", sheet=2,na=c("NA", ""))## recapture data
penID <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Pens_Assignments_2019-2020-Experiments.xlsx", na=c("NA", ""))
endfates<-read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/BreakdownFates_2019-2020-Experiments.xlsx",na=c("NA",""))
recaps
## Load Packages:
## --------------
if(!require(tidyr)) install.packages('tidyr'); library("tidyr")
if(!require(readxl)) install.packages('readxl'); library("readxl")
if(!require(ggplot2)) install.packages('ggplot2'); library("ggplot2")
if(!require(dplyr)) install.packages('dplyr'); library("dplyr")
if(!require(viridis)) install.packages('viridis'); library("viridis")
## --------------
#Nick's IPR theme
my_theme2 <- function()
{
cowplot::theme_cowplot() %+replace%
theme(panel.background = element_rect(color = "black", size=0.75,
linetype=1),
panel.border = element_rect(colour = "black", fill=NA, size=0.75),
axis.line=element_blank(),
strip.background=element_rect(fill='white'),
strip.text=element_text(size=12, face='bold'))
}
## Import Data:
## --------------------------------
recaps <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Recap_Database_2019-2020-Experiments_Master_20200125.xlsx", sheet=2,na=c("NA", ""))## recapture data
penID <- read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Pens_Assignments_2019-2020-Experiments.xlsx", na=c("NA", ""))
endfates<-read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/BreakdownFates_2019-2020-Experiments.xlsx",na=c("NA",""))
sex<-read_excel("~/GitHub/JuvenileEmigrationPhenology/Data/AMOP/Siegel Salamander data.xlsx",na=c("NA",""))
endfates<-merge(endfates,sex,by="PIT_Tag")
endfates<-merge(endfates,penID,by=c("PIT_Tag","Juv.Treat","Juv.Pen","Treatment","Species"))
## Format/Merge Data:
## ------------------
DOY.adj <- 157                           ## Standardize DOY to date of first release- 07 June 2019
recaps<-recaps%>%
#mutate(mutate(across(where(is.character), as.factor)))%>%
filter(!grepl("^UNK.",PIT_Tag))%>% #untagged animals we caught
filter(!grepl("Arianne",Notes))%>%
filter(!(Period%in%c("R1","R2","R3")))%>% #release periods
filter(PIT_Tag!="x0992")%>% #tag from last year
mutate(DOY = as.numeric(format(as.Date(as.character(Recap_Date),"%Y-%m-%d"),"%j")),
DOY_adj = ifelse(DOY >= DOY.adj, yes=DOY-(DOY.adj-1), no=DOY+(365-DOY.adj+1)),
Rel.DOY = as.numeric(format(as.Date(as.character(Release),"%Y-%m-%d"),"%j")),
Rel.DOY_adj = ifelse(Rel.DOY >= DOY.adj, yes=Rel.DOY-(DOY.adj-1), no=Rel.DOY+(365-DOY.adj+1)),
Recap_Loc = as.character(Recap_Loc),
Rc.Block = sapply(strsplit(Recap_Loc, ","), function(x) x[1]),
Rc.Pen = sapply(strsplit(Recap_Loc, ","), function(x) x[2]),
Rc.Micro = sapply(strsplit(Recap_Loc, ","), function(x) x[3]),
Moved = ifelse(is.na(Moved)==T, yes=0, no=Moved),
Visual = ifelse(is.na(Visual)==T | Visual==2, yes=0, no=Visual),
Burr_Vis = ifelse(is.na(Burr_Vis)==T, yes=0, no=Burr_Vis),
Pre.Alive = (Moved + Visual + Burr_Vis),
Pre.Alive = ifelse(Pre.Alive >= 1, yes=1, no=0))
recaps<-recaps%>%
mutate(DOY_adj1=if_else(Recap_Date>"2020-06-06",DOY_adj+365,DOY_adj))
penID<-penID%>%
select("PIT_Tag","Species","Juv.Pen","Juv.Treat","Meta.Mass.g")%>%
mutate(Rel.Block = sapply(strsplit(Juv.Pen, ","), function(x) x[1]),
Rel.Pen = sapply(strsplit(Juv.Pen, ","), function(x) x[2]))%>%
mutate(across(where(is.character), as.factor))
df <- merge(recaps, penID, by=c("PIT_Tag"),all.x=T)
ao_df<- df%>%
filter(as.factor(Juv.Treat)%in%c("L3-J1","L3-J3","L1-J1","L1-J3"))
ag.recaps<-ao_df%>%
mutate(Period=as.numeric(as.character(Period)))%>%
group_by(PIT_Tag,Juv.Treat,Rel.Block,Rel.Pen,Period)%>%
summarise(Nobs=sum(Pre.Alive))%>%
mutate(Pre.Alive=Nobs)%>%
mutate(Pre.Alive=if_else(Pre.Alive>=1,1,Pre.Alive))%>%
select(!Nobs)%>%
droplevels()
#pivot to wide format
ao_ch.pa<-ag.recaps%>%
pivot_wider(names_from = Period,values_from=Pre.Alive,values_fill=0,names_sort=TRUE,names_prefix="R")%>%
mutate(`R1`=rep(1))%>% #starting vector where they are all alive
relocate(`R1`, .after = Rel.Pen)
install.packages("tidyr")
library(tidyr)
#pivot to wide format
ao_ch.pa<-ag.recaps%>%
pivot_wider(names_from = Period,values_from=Pre.Alive,values_fill=0,names_sort=TRUE,names_prefix="R")%>%
mutate(`R1`=rep(1))%>% #starting vector where they are all alive
relocate(`R1`, .after = Rel.Pen)
